/* tslint:disable */
/* eslint-disable */
/**
 * Backend API
 * This API exposes endpoints to manage demo.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 *
 * @export
 * @interface ApplicationEntity
 */
export interface ApplicationEntity {
  /**
   *
   * @type {string}
   * @memberof ApplicationEntity
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationEntity
   */
  updatedAt?: string
  /**
   *
   * @type {number}
   * @memberof ApplicationEntity
   */
  id?: number
  /**
   *
   * @type {JobEntity}
   * @memberof ApplicationEntity
   */
  job?: JobEntity
  /**
   *
   * @type {UserEntity}
   * @memberof ApplicationEntity
   */
  freelancer?: UserEntity
  /**
   *
   * @type {string}
   * @memberof ApplicationEntity
   */
  cvUrl?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationEntity
   */
  status?: ApplicationEntityStatusEnum
}

export const ApplicationEntityStatusEnum = {
  Pending: 'PENDING',
  Accepted: 'ACCEPTED',
  Rejected: 'REJECTED'
} as const

export type ApplicationEntityStatusEnum = (typeof ApplicationEntityStatusEnum)[keyof typeof ApplicationEntityStatusEnum]

/**
 *
 * @export
 * @interface ApplicationResponse
 */
export interface ApplicationResponse {
  /**
   *
   * @type {number}
   * @memberof ApplicationResponse
   */
  id?: number
  /**
   *
   * @type {number}
   * @memberof ApplicationResponse
   */
  jobId?: number
  /**
   *
   * @type {string}
   * @memberof ApplicationResponse
   */
  jobTitle?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationResponse
   */
  freelancerName?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationResponse
   */
  cvUrl?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationResponse
   */
  dateApplied?: string
  /**
   *
   * @type {string}
   * @memberof ApplicationResponse
   */
  status?: ApplicationResponseStatusEnum
}

export const ApplicationResponseStatusEnum = {
  Pending: 'PENDING',
  Accepted: 'ACCEPTED',
  Rejected: 'REJECTED'
} as const

export type ApplicationResponseStatusEnum =
  (typeof ApplicationResponseStatusEnum)[keyof typeof ApplicationResponseStatusEnum]

/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken?: string
  /**
   *
   * @type {number}
   * @memberof AuthResponse
   */
  userId?: number
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  role?: AuthResponseRoleEnum
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  imageUrl?: string
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  fullName?: string
}

export const AuthResponseRoleEnum = {
  Admin: 'ADMIN',
  Employer: 'EMPLOYER',
  Candidate: 'CANDIDATE'
} as const

export type AuthResponseRoleEnum = (typeof AuthResponseRoleEnum)[keyof typeof AuthResponseRoleEnum]

/**
 *
 * @export
 * @interface CVEntity
 */
export interface CVEntity {
  /**
   *
   * @type {string}
   * @memberof CVEntity
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof CVEntity
   */
  updatedAt?: string
  /**
   *
   * @type {number}
   * @memberof CVEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof CVEntity
   */
  cvUrl?: string
  /**
   *
   * @type {UserEntity}
   * @memberof CVEntity
   */
  freelancer?: UserEntity
}
/**
 *
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  confirmPassword: string
  /**
   *
   * @type {number}
   * @memberof ChangePasswordRequest
   */
  otp?: number
}
/**
 *
 * @export
 * @interface CreateJobRequest
 */
export interface CreateJobRequest {
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  jobTitle?: string
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  jobDescription?: string
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  requirementDescription?: string
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  desirableDescription?: string
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  benefitDescription?: string
  /**
   *
   * @type {Array<string>}
   * @memberof CreateJobRequest
   */
  tags?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof CreateJobRequest
   */
  jobBenefits?: Array<string>
  /**
   *
   * @type {number}
   * @memberof CreateJobRequest
   */
  jobRoleId?: number
  /**
   *
   * @type {Array<number>}
   * @memberof CreateJobRequest
   */
  jobTypesId?: Array<number>
  /**
   *
   * @type {number}
   * @memberof CreateJobRequest
   */
  minimumSalary?: number
  /**
   *
   * @type {number}
   * @memberof CreateJobRequest
   */
  maximumSalary?: number
  /**
   *
   * @type {number}
   * @memberof CreateJobRequest
   */
  educationId?: number
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  experience?: string
  /**
   *
   * @type {number}
   * @memberof CreateJobRequest
   */
  vacancies?: number
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  expirationDate?: string
  /**
   *
   * @type {number}
   * @memberof CreateJobRequest
   */
  jobLevelId?: number
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  country?: string
  /**
   *
   * @type {string}
   * @memberof CreateJobRequest
   */
  city?: string
}
/**
 *
 * @export
 * @interface EducationEntity
 */
export interface EducationEntity {
  /**
   *
   * @type {number}
   * @memberof EducationEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof EducationEntity
   */
  level?: string
}
/**
 *
 * @export
 * @interface EmployerDto
 */
export interface EmployerDto {
  /**
   *
   * @type {number}
   * @memberof EmployerDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof EmployerDto
   */
  fullName?: string
}
/**
 *
 * @export
 * @interface IndustryEntity
 */
export interface IndustryEntity {
  /**
   *
   * @type {number}
   * @memberof IndustryEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof IndustryEntity
   */
  name?: string
}
/**
 *
 * @export
 * @interface IndustryWithJobCountDto
 */
export interface IndustryWithJobCountDto {
  /**
   *
   * @type {number}
   * @memberof IndustryWithJobCountDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof IndustryWithJobCountDto
   */
  name?: string
  /**
   *
   * @type {number}
   * @memberof IndustryWithJobCountDto
   */
  jobCount?: number
}
/**
 *
 * @export
 * @interface JobEntity
 */
export interface JobEntity {
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  updatedAt?: string
  /**
   *
   * @type {number}
   * @memberof JobEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  jobTitle?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  jobDescription?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  requirementDescription?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  desirableDescription?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  benefitDescription?: string
  /**
   *
   * @type {Array<string>}
   * @memberof JobEntity
   */
  tags?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof JobEntity
   */
  jobBenefits?: Array<string>
  /**
   *
   * @type {JobRoleEntity}
   * @memberof JobEntity
   */
  jobRole?: JobRoleEntity
  /**
   *
   * @type {Array<JobTypeEntity>}
   * @memberof JobEntity
   */
  jobTypes?: Array<JobTypeEntity>
  /**
   *
   * @type {number}
   * @memberof JobEntity
   */
  minimumSalary?: number
  /**
   *
   * @type {number}
   * @memberof JobEntity
   */
  maximumSalary?: number
  /**
   *
   * @type {EducationEntity}
   * @memberof JobEntity
   */
  education?: EducationEntity
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  experience?: string
  /**
   *
   * @type {number}
   * @memberof JobEntity
   */
  vacancies?: number
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  expirationDate?: string
  /**
   *
   * @type {JobLevelEntity}
   * @memberof JobEntity
   */
  jobLevel?: JobLevelEntity
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  country?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  city?: string
  /**
   *
   * @type {string}
   * @memberof JobEntity
   */
  logoPath?: string
  /**
   *
   * @type {UserEntity}
   * @memberof JobEntity
   */
  employer?: UserEntity
  /**
   *
   * @type {Array<ApplicationEntity>}
   * @memberof JobEntity
   */
  applications?: Array<ApplicationEntity>
  /**
   *
   * @type {Array<UserEntity>}
   * @memberof JobEntity
   */
  favoritedByUsers?: Array<UserEntity>
}
/**
 *
 * @export
 * @interface JobLevelEntity
 */
export interface JobLevelEntity {
  /**
   *
   * @type {number}
   * @memberof JobLevelEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof JobLevelEntity
   */
  level?: string
}
/**
 *
 * @export
 * @interface JobResponse
 */
export interface JobResponse {
  /**
   *
   * @type {number}
   * @memberof JobResponse
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  jobTitle?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  jobDescription?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  requirementDescription?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  desirableDescription?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  benefitDescription?: string
  /**
   *
   * @type {Array<string>}
   * @memberof JobResponse
   */
  tags?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof JobResponse
   */
  jobBenefits?: Array<string>
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  jobRole?: string
  /**
   *
   * @type {Array<string>}
   * @memberof JobResponse
   */
  jobTypes?: Array<string>
  /**
   *
   * @type {number}
   * @memberof JobResponse
   */
  minimumSalary?: number
  /**
   *
   * @type {number}
   * @memberof JobResponse
   */
  maximumSalary?: number
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  education?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  experience?: string
  /**
   *
   * @type {number}
   * @memberof JobResponse
   */
  vacancies?: number
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  expirationDate?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  jobLevel?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  country?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  city?: string
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  logoPath?: string
  /**
   *
   * @type {EmployerDto}
   * @memberof JobResponse
   */
  employer?: EmployerDto
  /**
   *
   * @type {string}
   * @memberof JobResponse
   */
  createdAt?: string
}
/**
 *
 * @export
 * @interface JobRoleEntity
 */
export interface JobRoleEntity {
  /**
   *
   * @type {number}
   * @memberof JobRoleEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof JobRoleEntity
   */
  name?: string
  /**
   *
   * @type {IndustryEntity}
   * @memberof JobRoleEntity
   */
  industry?: IndustryEntity
  /**
   *
   * @type {Array<JobLevelEntity>}
   * @memberof JobRoleEntity
   */
  jobLevels?: Array<JobLevelEntity>
}
/**
 *
 * @export
 * @interface JobTypeEntity
 */
export interface JobTypeEntity {
  /**
   *
   * @type {number}
   * @memberof JobTypeEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof JobTypeEntity
   */
  name?: string
  /**
   *
   * @type {Array<JobEntity>}
   * @memberof JobTypeEntity
   */
  jobs?: Array<JobEntity>
}
/**
 *
 * @export
 * @interface JobWithApplicationsResponse
 */
export interface JobWithApplicationsResponse {
  /**
   *
   * @type {number}
   * @memberof JobWithApplicationsResponse
   */
  jobId?: number
  /**
   *
   * @type {string}
   * @memberof JobWithApplicationsResponse
   */
  jobTitle?: string
  /**
   *
   * @type {string}
   * @memberof JobWithApplicationsResponse
   */
  status?: string
  /**
   *
   * @type {Array<ApplicationResponse>}
   * @memberof JobWithApplicationsResponse
   */
  applications?: Array<ApplicationResponse>
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password: string
}
/**
 *
 * @export
 * @interface PackageEntity
 */
export interface PackageEntity {
  /**
   *
   * @type {string}
   * @memberof PackageEntity
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof PackageEntity
   */
  updatedAt?: string
  /**
   *
   * @type {number}
   * @memberof PackageEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof PackageEntity
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof PackageEntity
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof PackageEntity
   */
  price?: number
  /**
   *
   * @type {number}
   * @memberof PackageEntity
   */
  durationInDays?: number
}
/**
 *
 * @export
 * @interface PagedResponseJobResponse
 */
export interface PagedResponseJobResponse {
  /**
   *
   * @type {Array<JobResponse>}
   * @memberof PagedResponseJobResponse
   */
  content?: Array<JobResponse>
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobResponse
   */
  page?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobResponse
   */
  size?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobResponse
   */
  totalElements?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobResponse
   */
  totalPages?: number
}
/**
 *
 * @export
 * @interface PagedResponseJobRoleEntity
 */
export interface PagedResponseJobRoleEntity {
  /**
   *
   * @type {Array<JobRoleEntity>}
   * @memberof PagedResponseJobRoleEntity
   */
  content?: Array<JobRoleEntity>
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobRoleEntity
   */
  page?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobRoleEntity
   */
  size?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobRoleEntity
   */
  totalElements?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponseJobRoleEntity
   */
  totalPages?: number
}
/**
 *
 * @export
 * @interface PagedResponsePaymentResponse
 */
export interface PagedResponsePaymentResponse {
  /**
   *
   * @type {Array<PaymentResponse>}
   * @memberof PagedResponsePaymentResponse
   */
  content?: Array<PaymentResponse>
  /**
   *
   * @type {number}
   * @memberof PagedResponsePaymentResponse
   */
  page?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponsePaymentResponse
   */
  size?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponsePaymentResponse
   */
  totalElements?: number
  /**
   *
   * @type {number}
   * @memberof PagedResponsePaymentResponse
   */
  totalPages?: number
}
/**
 *
 * @export
 * @interface PaymentRequest
 */
export interface PaymentRequest {
  /**
   *
   * @type {number}
   * @memberof PaymentRequest
   */
  userId?: number
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  productName?: string
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  returnUrl?: string
  /**
   *
   * @type {number}
   * @memberof PaymentRequest
   */
  price?: number
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  cancelUrl?: string
  /**
   *
   * @type {string}
   * @memberof PaymentRequest
   */
  packages?: string
}
/**
 *
 * @export
 * @interface PaymentResponse
 */
export interface PaymentResponse {
  /**
   *
   * @type {UserDto}
   * @memberof PaymentResponse
   */
  user?: UserDto
  /**
   *
   * @type {number}
   * @memberof PaymentResponse
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  packages?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  expiredAt?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  accountName?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  accountNumber?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  paymentLinkId?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  bin?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof PaymentResponse
   */
  amount?: number
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  status?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  transactionDate?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  reference?: string
  /**
   *
   * @type {number}
   * @memberof PaymentResponse
   */
  orderCode?: number
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  checkoutUrl?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  qrCode?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  currency?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof PaymentResponse
   */
  updatedAt?: string
}
/**
 *
 * @export
 * @interface SignUpRequest
 */
export interface SignUpRequest {
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  firstName: string
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  lastName: string
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  password: string
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  confirmPassword: string
  /**
   *
   * @type {string}
   * @memberof SignUpRequest
   */
  role: string
}
/**
 *
 * @export
 * @interface SocialLinkDto
 */
export interface SocialLinkDto {
  /**
   *
   * @type {string}
   * @memberof SocialLinkDto
   */
  platform?: string
  /**
   *
   * @type {string}
   * @memberof SocialLinkDto
   */
  link?: string
}
/**
 *
 * @export
 * @interface SocialLinkEntity
 */
export interface SocialLinkEntity {
  /**
   *
   * @type {number}
   * @memberof SocialLinkEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof SocialLinkEntity
   */
  platform?: string
  /**
   *
   * @type {string}
   * @memberof SocialLinkEntity
   */
  link?: string
  /**
   *
   * @type {UserEntity}
   * @memberof SocialLinkEntity
   */
  user?: UserEntity
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {number}
   * @memberof UserDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  fullName?: string
}
/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  updatedAt?: string
  /**
   *
   * @type {number}
   * @memberof UserEntity
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  fullName?: string
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  phoneNumber?: string
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  imageUrl?: string
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  role?: UserEntityRoleEnum
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  isActive?: boolean
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  emailVerified?: boolean
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  isSetup?: boolean
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  canPost?: boolean
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  socialProvider?: UserEntitySocialProviderEnum
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  providerId?: string
  /**
   *
   * @type {Array<SocialLinkEntity>}
   * @memberof UserEntity
   */
  socialLinks?: Array<SocialLinkEntity>
  /**
   *
   * @type {Array<JobEntity>}
   * @memberof UserEntity
   */
  jobs?: Array<JobEntity>
  /**
   *
   * @type {Array<JobEntity>}
   * @memberof UserEntity
   */
  favoriteJobs?: Array<JobEntity>
  /**
   *
   * @type {Array<ApplicationEntity>}
   * @memberof UserEntity
   */
  applications?: Array<ApplicationEntity>
  /**
   *
   * @type {Array<CVEntity>}
   * @memberof UserEntity
   */
  cvs?: Array<CVEntity>
  /**
   *
   * @type {Array<string>}
   * @memberof UserEntity
   */
  purchasedPackages?: Array<string>
}

export const UserEntityRoleEnum = {
  Admin: 'ADMIN',
  Employer: 'EMPLOYER',
  Candidate: 'CANDIDATE'
} as const

export type UserEntityRoleEnum = (typeof UserEntityRoleEnum)[keyof typeof UserEntityRoleEnum]
export const UserEntitySocialProviderEnum = {
  Database: 'DATABASE',
  Facebook: 'FACEBOOK',
  Google: 'GOOGLE'
} as const

export type UserEntitySocialProviderEnum =
  (typeof UserEntitySocialProviderEnum)[keyof typeof UserEntitySocialProviderEnum]

/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
  /**
   *
   * @type {number}
   * @memberof UserResponse
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  fullName?: string
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  phoneNumber?: string
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  imageUrl?: string
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  role?: UserResponseRoleEnum
  /**
   *
   * @type {boolean}
   * @memberof UserResponse
   */
  isActive?: boolean
  /**
   *
   * @type {boolean}
   * @memberof UserResponse
   */
  emailVerified?: boolean
  /**
   *
   * @type {boolean}
   * @memberof UserResponse
   */
  isSetup?: boolean
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  socialProvider?: UserResponseSocialProviderEnum
  /**
   *
   * @type {string}
   * @memberof UserResponse
   */
  providerId?: string
  /**
   *
   * @type {Array<SocialLinkDto>}
   * @memberof UserResponse
   */
  socialLinks?: Array<SocialLinkDto>
  /**
   *
   * @type {Array<string>}
   * @memberof UserResponse
   */
  purchasedPackages?: Array<string>
}

export const UserResponseRoleEnum = {
  Admin: 'ADMIN',
  Employer: 'EMPLOYER',
  Candidate: 'CANDIDATE'
} as const

export type UserResponseRoleEnum = (typeof UserResponseRoleEnum)[keyof typeof UserResponseRoleEnum]
export const UserResponseSocialProviderEnum = {
  Database: 'DATABASE',
  Facebook: 'FACEBOOK',
  Google: 'GOOGLE'
} as const

export type UserResponseSocialProviderEnum =
  (typeof UserResponseSocialProviderEnum)[keyof typeof UserResponseSocialProviderEnum]

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword: async (
      changePasswordRequest: ChangePasswordRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'changePasswordRequest' is not null or undefined
      assertParamExists('changePassword', 'changePasswordRequest', changePasswordRequest)
      const localVarPath = `/api/v1/auth/reset-password`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateOTP: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists('generateOTP', 'email', email)
      const localVarPath = `/api/v1/auth/send-otp`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (email !== undefined) {
        localVarQueryParameter['email'] = email
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signin: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'loginRequest' is not null or undefined
      assertParamExists('signin', 'loginRequest', loginRequest)
      const localVarPath = `/api/v1/auth/signin`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {SignUpRequest} signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: async (signUpRequest: SignUpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'signUpRequest' is not null or undefined
      assertParamExists('signup', 'signUpRequest', signUpRequest)
      const localVarPath = `/api/v1/auth/signup`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(signUpRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} email
     * @param {number} otp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verify: async (email: string, otp: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists('verify', 'email', email)
      // verify required parameter 'otp' is not null or undefined
      assertParamExists('verify', 'otp', otp)
      const localVarPath = `/api/v1/auth/verify`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (email !== undefined) {
        localVarQueryParameter['email'] = email
      }

      if (otp !== undefined) {
        localVarQueryParameter['otp'] = otp
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changePassword(
      changePasswordRequest: ChangePasswordRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthControllerApi.changePassword']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async generateOTP(
      email: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.generateOTP(email, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthControllerApi.generateOTP']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signin(
      loginRequest: LoginRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signin(loginRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthControllerApi.signin']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {SignUpRequest} signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signup(
      signUpRequest: SignUpRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signup(signUpRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthControllerApi.signup']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} email
     * @param {number} otp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async verify(
      email: string,
      otp: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.verify(email, otp, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthControllerApi.verify']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthControllerApiFp(configuration)
  return {
    /**
     *
     * @param {ChangePasswordRequest} changePasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePasswordRequest: ChangePasswordRequest, options?: any): AxiosPromise<object> {
      return localVarFp.changePassword(changePasswordRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateOTP(email: string, options?: any): AxiosPromise<object> {
      return localVarFp.generateOTP(email, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signin(loginRequest: LoginRequest, options?: any): AxiosPromise<AuthResponse> {
      return localVarFp.signin(loginRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {SignUpRequest} signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(signUpRequest: SignUpRequest, options?: any): AxiosPromise<object> {
      return localVarFp.signup(signUpRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} email
     * @param {number} otp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verify(email: string, otp: number, options?: any): AxiosPromise<object> {
      return localVarFp.verify(email, otp, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
  /**
   *
   * @param {ChangePasswordRequest} changePasswordRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public changePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig) {
    return AuthControllerApiFp(this.configuration)
      .changePassword(changePasswordRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public generateOTP(email: string, options?: RawAxiosRequestConfig) {
    return AuthControllerApiFp(this.configuration)
      .generateOTP(email, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {LoginRequest} loginRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public signin(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
    return AuthControllerApiFp(this.configuration)
      .signin(loginRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {SignUpRequest} signUpRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public signup(signUpRequest: SignUpRequest, options?: RawAxiosRequestConfig) {
    return AuthControllerApiFp(this.configuration)
      .signup(signUpRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} email
   * @param {number} otp
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public verify(email: string, otp: number, options?: RawAxiosRequestConfig) {
    return AuthControllerApiFp(this.configuration)
      .verify(email, otp, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CandidateControllerApi - axios parameter creator
 * @export
 */
export const CandidateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFavoriteJob: async (body: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('addFavoriteJob', 'body', body)
      const localVarPath = `/api/v1/candidates/favorites`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} jobId
     * @param {File} [cvFile]
     * @param {number} [cvId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyJob: async (
      jobId: number,
      cvFile?: File,
      cvId?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'jobId' is not null or undefined
      assertParamExists('applyJob', 'jobId', jobId)
      const localVarPath = `/api/v1/candidates/apply/{jobId}`.replace(`{${'jobId'}}`, encodeURIComponent(String(jobId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (cvFile !== undefined) {
        localVarFormParams.append('cvFile', cvFile as any)
      }

      if (cvId !== undefined) {
        localVarFormParams.append('cvId', cvId as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppliedJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/candidates/jobs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/candidates/favorites`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteJob: async (jobId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'jobId' is not null or undefined
      assertParamExists('removeFavoriteJob', 'jobId', jobId)
      const localVarPath = `/api/v1/candidates/favorites/remove`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (jobId !== undefined) {
        localVarQueryParameter['jobId'] = jobId
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CandidateControllerApi - functional programming interface
 * @export
 */
export const CandidateControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CandidateControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addFavoriteJob(
      body: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addFavoriteJob(body, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CandidateControllerApi.addFavoriteJob']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} jobId
     * @param {File} [cvFile]
     * @param {number} [cvId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async applyJob(
      jobId: number,
      cvFile?: File,
      cvId?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.applyJob(jobId, cvFile, cvId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CandidateControllerApi.applyJob']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppliedJobs(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAppliedJobs(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CandidateControllerApi.getAppliedJobs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFavoriteJobs(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFavoriteJobs(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CandidateControllerApi.getFavoriteJobs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeFavoriteJob(
      jobId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeFavoriteJob(jobId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CandidateControllerApi.removeFavoriteJob']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * CandidateControllerApi - factory interface
 * @export
 */
export const CandidateControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CandidateControllerApiFp(configuration)
  return {
    /**
     *
     * @param {number} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFavoriteJob(body: number, options?: any): AxiosPromise<string> {
      return localVarFp.addFavoriteJob(body, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} jobId
     * @param {File} [cvFile]
     * @param {number} [cvId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    applyJob(jobId: number, cvFile?: File, cvId?: number, options?: any): AxiosPromise<string> {
      return localVarFp.applyJob(jobId, cvFile, cvId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppliedJobs(options?: any): AxiosPromise<Array<ApplicationResponse>> {
      return localVarFp.getAppliedJobs(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFavoriteJobs(options?: any): AxiosPromise<Array<JobResponse>> {
      return localVarFp.getFavoriteJobs(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFavoriteJob(jobId: number, options?: any): AxiosPromise<string> {
      return localVarFp.removeFavoriteJob(jobId, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * CandidateControllerApi - object-oriented interface
 * @export
 * @class CandidateControllerApi
 * @extends {BaseAPI}
 */
export class CandidateControllerApi extends BaseAPI {
  /**
   *
   * @param {number} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateControllerApi
   */
  public addFavoriteJob(body: number, options?: RawAxiosRequestConfig) {
    return CandidateControllerApiFp(this.configuration)
      .addFavoriteJob(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} jobId
   * @param {File} [cvFile]
   * @param {number} [cvId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateControllerApi
   */
  public applyJob(jobId: number, cvFile?: File, cvId?: number, options?: RawAxiosRequestConfig) {
    return CandidateControllerApiFp(this.configuration)
      .applyJob(jobId, cvFile, cvId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateControllerApi
   */
  public getAppliedJobs(options?: RawAxiosRequestConfig) {
    return CandidateControllerApiFp(this.configuration)
      .getAppliedJobs(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateControllerApi
   */
  public getFavoriteJobs(options?: RawAxiosRequestConfig) {
    return CandidateControllerApiFp(this.configuration)
      .getFavoriteJobs(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} jobId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateControllerApi
   */
  public removeFavoriteJob(jobId: number, options?: RawAxiosRequestConfig) {
    return CandidateControllerApiFp(this.configuration)
      .removeFavoriteJob(jobId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CategoryControllerApi - axios parameter creator
 * @export
 */
export const CategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularCategoriesWithJobCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/categories/popular`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export const CategoryControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoryControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPopularCategoriesWithJobCount(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IndustryWithJobCountDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPopularCategoriesWithJobCount(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['CategoryControllerApi.getPopularCategoriesWithJobCount']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * CategoryControllerApi - factory interface
 * @export
 */
export const CategoryControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoryControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularCategoriesWithJobCount(options?: any): AxiosPromise<Array<IndustryWithJobCountDto>> {
      return localVarFp.getPopularCategoriesWithJobCount(options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export class CategoryControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryControllerApi
   */
  public getPopularCategoriesWithJobCount(options?: RawAxiosRequestConfig) {
    return CategoryControllerApiFp(this.configuration)
      .getPopularCategoriesWithJobCount(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * EmployerControllerApi - axios parameter creator
 * @export
 */
export const EmployerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployerJobs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employers/jobs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployerJobsWithApplications: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/employers/applications`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePackage: async (packageId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'packageId' is not null or undefined
      assertParamExists('purchasePackage', 'packageId', packageId)
      const localVarPath = `/api/v1/employers/purchase/{packageId}`.replace(
        `{${'packageId'}}`,
        encodeURIComponent(String(packageId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} applicationId
     * @param {UpdateApplicationStatusStatusEnum} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationStatus: async (
      applicationId: number,
      status: UpdateApplicationStatusStatusEnum,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'applicationId' is not null or undefined
      assertParamExists('updateApplicationStatus', 'applicationId', applicationId)
      // verify required parameter 'status' is not null or undefined
      assertParamExists('updateApplicationStatus', 'status', status)
      const localVarPath = `/api/v1/employers/status/{applicationId}`.replace(
        `{${'applicationId'}}`,
        encodeURIComponent(String(applicationId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (status !== undefined) {
        localVarQueryParameter['status'] = status
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * EmployerControllerApi - functional programming interface
 * @export
 */
export const EmployerControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = EmployerControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployerJobs(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployerJobs(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['EmployerControllerApi.getEmployerJobs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEmployerJobsWithApplications(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobWithApplicationsResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployerJobsWithApplications(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['EmployerControllerApi.getEmployerJobsWithApplications']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async purchasePackage(
      packageId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.purchasePackage(packageId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['EmployerControllerApi.purchasePackage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} applicationId
     * @param {UpdateApplicationStatusStatusEnum} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateApplicationStatus(
      applicationId: number,
      status: UpdateApplicationStatusStatusEnum,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateApplicationStatus(applicationId, status, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['EmployerControllerApi.updateApplicationStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * EmployerControllerApi - factory interface
 * @export
 */
export const EmployerControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = EmployerControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployerJobs(options?: any): AxiosPromise<Array<JobResponse>> {
      return localVarFp.getEmployerJobs(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmployerJobsWithApplications(options?: any): AxiosPromise<Array<JobWithApplicationsResponse>> {
      return localVarFp.getEmployerJobsWithApplications(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} packageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePackage(packageId: number, options?: any): AxiosPromise<string> {
      return localVarFp.purchasePackage(packageId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} applicationId
     * @param {UpdateApplicationStatusStatusEnum} status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateApplicationStatus(
      applicationId: number,
      status: UpdateApplicationStatusStatusEnum,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .updateApplicationStatus(applicationId, status, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * EmployerControllerApi - object-oriented interface
 * @export
 * @class EmployerControllerApi
 * @extends {BaseAPI}
 */
export class EmployerControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployerControllerApi
   */
  public getEmployerJobs(options?: RawAxiosRequestConfig) {
    return EmployerControllerApiFp(this.configuration)
      .getEmployerJobs(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployerControllerApi
   */
  public getEmployerJobsWithApplications(options?: RawAxiosRequestConfig) {
    return EmployerControllerApiFp(this.configuration)
      .getEmployerJobsWithApplications(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} packageId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployerControllerApi
   */
  public purchasePackage(packageId: number, options?: RawAxiosRequestConfig) {
    return EmployerControllerApiFp(this.configuration)
      .purchasePackage(packageId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} applicationId
   * @param {UpdateApplicationStatusStatusEnum} status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmployerControllerApi
   */
  public updateApplicationStatus(
    applicationId: number,
    status: UpdateApplicationStatusStatusEnum,
    options?: RawAxiosRequestConfig
  ) {
    return EmployerControllerApiFp(this.configuration)
      .updateApplicationStatus(applicationId, status, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const UpdateApplicationStatusStatusEnum = {
  Pending: 'PENDING',
  Accepted: 'ACCEPTED',
  Rejected: 'REJECTED'
} as const
export type UpdateApplicationStatusStatusEnum =
  (typeof UpdateApplicationStatusStatusEnum)[keyof typeof UpdateApplicationStatusStatusEnum]

/**
 * JobControllerApi - axios parameter creator
 * @export
 */
export const JobControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {CreateJobRequest} createJobRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJob: async (
      createJobRequest: CreateJobRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createJobRequest' is not null or undefined
      assertParamExists('createJob', 'createJobRequest', createJobRequest)
      const localVarPath = `/api/v1/jobs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createJobRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJob: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteJob', 'id', id)
      const localVarPath = `/api/v1/jobs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getJobById', 'id', id)
      const localVarPath = `/api/v1/jobs/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {string} [jobTitle]
     * @param {string} [city]
     * @param {string} [country]
     * @param {number} [minimumSalary]
     * @param {number} [maximumSalary]
     * @param {string} [industry]
     * @param {string} [jobRole]
     * @param {number} [page]
     * @param {number} [size]
     * @param {SearchJobsSortByEnum} [sortBy]
     * @param {SearchJobsSortOrderEnum} [sortOrder]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchJobs: async (
      jobTitle?: string,
      city?: string,
      country?: string,
      minimumSalary?: number,
      maximumSalary?: number,
      industry?: string,
      jobRole?: string,
      page?: number,
      size?: number,
      sortBy?: SearchJobsSortByEnum,
      sortOrder?: SearchJobsSortOrderEnum,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/jobs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (jobTitle !== undefined) {
        localVarQueryParameter['jobTitle'] = jobTitle
      }

      if (city !== undefined) {
        localVarQueryParameter['city'] = city
      }

      if (country !== undefined) {
        localVarQueryParameter['country'] = country
      }

      if (minimumSalary !== undefined) {
        localVarQueryParameter['minimumSalary'] = minimumSalary
      }

      if (maximumSalary !== undefined) {
        localVarQueryParameter['maximumSalary'] = maximumSalary
      }

      if (industry !== undefined) {
        localVarQueryParameter['industry'] = industry
      }

      if (jobRole !== undefined) {
        localVarQueryParameter['jobRole'] = jobRole
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      if (sortBy !== undefined) {
        localVarQueryParameter['sortBy'] = sortBy
      }

      if (sortOrder !== undefined) {
        localVarQueryParameter['sortOrder'] = sortOrder
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * JobControllerApi - functional programming interface
 * @export
 */
export const JobControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = JobControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {CreateJobRequest} createJobRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createJob(
      createJobRequest: CreateJobRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(createJobRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['JobControllerApi.createJob']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteJob(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteJob(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['JobControllerApi.deleteJob']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getJobById(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getJobById(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['JobControllerApi.getJobById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {string} [jobTitle]
     * @param {string} [city]
     * @param {string} [country]
     * @param {number} [minimumSalary]
     * @param {number} [maximumSalary]
     * @param {string} [industry]
     * @param {string} [jobRole]
     * @param {number} [page]
     * @param {number} [size]
     * @param {SearchJobsSortByEnum} [sortBy]
     * @param {SearchJobsSortOrderEnum} [sortOrder]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchJobs(
      jobTitle?: string,
      city?: string,
      country?: string,
      minimumSalary?: number,
      maximumSalary?: number,
      industry?: string,
      jobRole?: string,
      page?: number,
      size?: number,
      sortBy?: SearchJobsSortByEnum,
      sortOrder?: SearchJobsSortOrderEnum,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResponseJobResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchJobs(
        jobTitle,
        city,
        country,
        minimumSalary,
        maximumSalary,
        industry,
        jobRole,
        page,
        size,
        sortBy,
        sortOrder,
        options
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['JobControllerApi.searchJobs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * JobControllerApi - factory interface
 * @export
 */
export const JobControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = JobControllerApiFp(configuration)
  return {
    /**
     *
     * @param {CreateJobRequest} createJobRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createJob(createJobRequest: CreateJobRequest, options?: any): AxiosPromise<JobResponse> {
      return localVarFp.createJob(createJobRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteJob(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deleteJob(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getJobById(id: number, options?: any): AxiosPromise<JobResponse> {
      return localVarFp.getJobById(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} [jobTitle]
     * @param {string} [city]
     * @param {string} [country]
     * @param {number} [minimumSalary]
     * @param {number} [maximumSalary]
     * @param {string} [industry]
     * @param {string} [jobRole]
     * @param {number} [page]
     * @param {number} [size]
     * @param {SearchJobsSortByEnum} [sortBy]
     * @param {SearchJobsSortOrderEnum} [sortOrder]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchJobs(
      jobTitle?: string,
      city?: string,
      country?: string,
      minimumSalary?: number,
      maximumSalary?: number,
      industry?: string,
      jobRole?: string,
      page?: number,
      size?: number,
      sortBy?: SearchJobsSortByEnum,
      sortOrder?: SearchJobsSortOrderEnum,
      options?: any
    ): AxiosPromise<PagedResponseJobResponse> {
      return localVarFp
        .searchJobs(
          jobTitle,
          city,
          country,
          minimumSalary,
          maximumSalary,
          industry,
          jobRole,
          page,
          size,
          sortBy,
          sortOrder,
          options
        )
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * JobControllerApi - object-oriented interface
 * @export
 * @class JobControllerApi
 * @extends {BaseAPI}
 */
export class JobControllerApi extends BaseAPI {
  /**
   *
   * @param {CreateJobRequest} createJobRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobControllerApi
   */
  public createJob(createJobRequest: CreateJobRequest, options?: RawAxiosRequestConfig) {
    return JobControllerApiFp(this.configuration)
      .createJob(createJobRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobControllerApi
   */
  public deleteJob(id: number, options?: RawAxiosRequestConfig) {
    return JobControllerApiFp(this.configuration)
      .deleteJob(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobControllerApi
   */
  public getJobById(id: number, options?: RawAxiosRequestConfig) {
    return JobControllerApiFp(this.configuration)
      .getJobById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} [jobTitle]
   * @param {string} [city]
   * @param {string} [country]
   * @param {number} [minimumSalary]
   * @param {number} [maximumSalary]
   * @param {string} [industry]
   * @param {string} [jobRole]
   * @param {number} [page]
   * @param {number} [size]
   * @param {SearchJobsSortByEnum} [sortBy]
   * @param {SearchJobsSortOrderEnum} [sortOrder]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobControllerApi
   */
  public searchJobs(
    jobTitle?: string,
    city?: string,
    country?: string,
    minimumSalary?: number,
    maximumSalary?: number,
    industry?: string,
    jobRole?: string,
    page?: number,
    size?: number,
    sortBy?: SearchJobsSortByEnum,
    sortOrder?: SearchJobsSortOrderEnum,
    options?: RawAxiosRequestConfig
  ) {
    return JobControllerApiFp(this.configuration)
      .searchJobs(
        jobTitle,
        city,
        country,
        minimumSalary,
        maximumSalary,
        industry,
        jobRole,
        page,
        size,
        sortBy,
        sortOrder,
        options
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const SearchJobsSortByEnum = {
  JobTitle: 'JOB_TITLE',
  Salary: 'SALARY',
  CreatedAt: 'CREATED_AT'
} as const
export type SearchJobsSortByEnum = (typeof SearchJobsSortByEnum)[keyof typeof SearchJobsSortByEnum]
/**
 * @export
 */
export const SearchJobsSortOrderEnum = {
  Asc: 'ASC',
  Desc: 'DESC'
} as const
export type SearchJobsSortOrderEnum = (typeof SearchJobsSortOrderEnum)[keyof typeof SearchJobsSortOrderEnum]

/**
 * JobRoleControllerApi - axios parameter creator
 * @export
 */
export const JobRoleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularJobRole: async (
      page?: number,
      size?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/jobroles/popular`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * JobRoleControllerApi - functional programming interface
 * @export
 */
export const JobRoleControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = JobRoleControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPopularJobRole(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResponseJobRoleEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPopularJobRole(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['JobRoleControllerApi.getPopularJobRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * JobRoleControllerApi - factory interface
 * @export
 */
export const JobRoleControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = JobRoleControllerApiFp(configuration)
  return {
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPopularJobRole(page?: number, size?: number, options?: any): AxiosPromise<PagedResponseJobRoleEntity> {
      return localVarFp.getPopularJobRole(page, size, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * JobRoleControllerApi - object-oriented interface
 * @export
 * @class JobRoleControllerApi
 * @extends {BaseAPI}
 */
export class JobRoleControllerApi extends BaseAPI {
  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof JobRoleControllerApi
   */
  public getPopularJobRole(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return JobRoleControllerApiFp(this.configuration)
      .getPopularJobRole(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PackageControllerApi - axios parameter creator
 * @export
 */
export const PackageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPackages: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/packages`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPackageById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getPackageById', 'id', id)
      const localVarPath = `/api/v1/packages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PackageControllerApi - functional programming interface
 * @export
 */
export const PackageControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PackageControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPackages(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PackageEntity>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPackages(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PackageControllerApi.getAllPackages']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPackageById(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPackageById(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PackageControllerApi.getPackageById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * PackageControllerApi - factory interface
 * @export
 */
export const PackageControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PackageControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPackages(options?: any): AxiosPromise<Array<PackageEntity>> {
      return localVarFp.getAllPackages(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPackageById(id: number, options?: any): AxiosPromise<PackageEntity> {
      return localVarFp.getPackageById(id, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * PackageControllerApi - object-oriented interface
 * @export
 * @class PackageControllerApi
 * @extends {BaseAPI}
 */
export class PackageControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackageControllerApi
   */
  public getAllPackages(options?: RawAxiosRequestConfig) {
    return PackageControllerApiFp(this.configuration)
      .getAllPackages(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PackageControllerApi
   */
  public getPackageById(id: number, options?: RawAxiosRequestConfig) {
    return PackageControllerApiFp(this.configuration)
      .getPackageById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PaymentControllerApi - axios parameter creator
 * @export
 */
export const PaymentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder: async (orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists('cancelOrder', 'orderId', orderId)
      const localVarPath = `/api/v1/payment/{orderId}`.replace(`{${'orderId'}}`, encodeURIComponent(String(orderId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmWebhook: async (
      requestBody: { [key: string]: string },
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists('confirmWebhook', 'requestBody', requestBody)
      const localVarPath = `/api/v1/payment/confirm-webhook`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {PaymentRequest} paymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentLink: async (
      paymentRequest: PaymentRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentRequest' is not null or undefined
      assertParamExists('createPaymentLink', 'paymentRequest', paymentRequest)
      const localVarPath = `/api/v1/payment/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(paymentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPayments: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/payment`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (size !== undefined) {
        localVarQueryParameter['size'] = size
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMonthlyRevenue: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/payment/monthly-revenue`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById: async (orderId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'orderId' is not null or undefined
      assertParamExists('getOrderById', 'orderId', orderId)
      const localVarPath = `/api/v1/payment/{orderId}`.replace(`{${'orderId'}}`, encodeURIComponent(String(orderId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodayDashboard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/payment/today`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWeeklyRevenue: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/payment/weekly-revenue`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payosTransferHandler: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('payosTransferHandler', 'body', body)
      const localVarPath = `/api/v1/payment/ipn`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PaymentControllerApi - functional programming interface
 * @export
 */
export const PaymentControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelOrder(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrder(orderId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.cancelOrder']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async confirmWebhook(
      requestBody: { [key: string]: string },
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.confirmWebhook(requestBody, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.confirmWebhook']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {PaymentRequest} paymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPaymentLink(
      paymentRequest: PaymentRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentLink(paymentRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.createPaymentLink']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPayments(
      page?: number,
      size?: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedResponsePaymentResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPayments(page, size, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.getAllPayments']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMonthlyRevenue(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMonthlyRevenue(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.getMonthlyRevenue']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrderById(
      orderId: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderById(orderId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.getOrderById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTodayDashboard(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTodayDashboard(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.getTodayDashboard']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWeeklyRevenue(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWeeklyRevenue(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.getWeeklyRevenue']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async payosTransferHandler(
      body: object,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.payosTransferHandler(body, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PaymentControllerApi.payosTransferHandler']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * PaymentControllerApi - factory interface
 * @export
 */
export const PaymentControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PaymentControllerApiFp(configuration)
  return {
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrder(orderId: number, options?: any): AxiosPromise<object> {
      return localVarFp.cancelOrder(orderId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {{ [key: string]: string; }} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmWebhook(requestBody: { [key: string]: string }, options?: any): AxiosPromise<object> {
      return localVarFp.confirmWebhook(requestBody, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {PaymentRequest} paymentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentLink(paymentRequest: PaymentRequest, options?: any): AxiosPromise<object> {
      return localVarFp.createPaymentLink(paymentRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} [page]
     * @param {number} [size]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPayments(page?: number, size?: number, options?: any): AxiosPromise<PagedResponsePaymentResponse> {
      return localVarFp.getAllPayments(page, size, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMonthlyRevenue(options?: any): AxiosPromise<Array<number>> {
      return localVarFp.getMonthlyRevenue(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrderById(orderId: number, options?: any): AxiosPromise<object> {
      return localVarFp.getOrderById(orderId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTodayDashboard(options?: any): AxiosPromise<object> {
      return localVarFp.getTodayDashboard(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWeeklyRevenue(options?: any): AxiosPromise<Array<number>> {
      return localVarFp.getWeeklyRevenue(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payosTransferHandler(body: object, options?: any): AxiosPromise<object> {
      return localVarFp.payosTransferHandler(body, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * PaymentControllerApi - object-oriented interface
 * @export
 * @class PaymentControllerApi
 * @extends {BaseAPI}
 */
export class PaymentControllerApi extends BaseAPI {
  /**
   *
   * @param {number} orderId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public cancelOrder(orderId: number, options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .cancelOrder(orderId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {{ [key: string]: string; }} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public confirmWebhook(requestBody: { [key: string]: string }, options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .confirmWebhook(requestBody, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {PaymentRequest} paymentRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public createPaymentLink(paymentRequest: PaymentRequest, options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .createPaymentLink(paymentRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} [page]
   * @param {number} [size]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public getAllPayments(page?: number, size?: number, options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .getAllPayments(page, size, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public getMonthlyRevenue(options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .getMonthlyRevenue(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} orderId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public getOrderById(orderId: number, options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .getOrderById(orderId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public getTodayDashboard(options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .getTodayDashboard(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public getWeeklyRevenue(options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .getWeeklyRevenue(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {object} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentControllerApi
   */
  public payosTransferHandler(body: object, options?: RawAxiosRequestConfig) {
    return PaymentControllerApiFp(this.configuration)
      .payosTransferHandler(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/profile`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfile(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ProfileControllerApi.getProfile']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProfileControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: any): AxiosPromise<UserResponse> {
      return localVarFp.getProfile(options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProfileControllerApi
   */
  public getProfile(options?: RawAxiosRequestConfig) {
    return ProfileControllerApiFp(this.configuration)
      .getProfile(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteUser', 'id', id)
      const localVarPath = `/api/v1/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUserById', 'id', id)
      const localVarPath = `/api/v1/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer_Authentication required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.deleteUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUsers(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.getAllUsers']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['UserControllerApi.getUserById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    }
  }
}

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserControllerApiFp(configuration)
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: number, options?: any): AxiosPromise<void> {
      return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers(options?: any): AxiosPromise<Array<UserResponse>> {
      return localVarFp.getAllUsers(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: number, options?: any): AxiosPromise<UserEntity> {
      return localVarFp.getUserById(id, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public deleteUser(id: number, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .deleteUser(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getAllUsers(options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .getAllUsers(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getUserById(id: number, options?: RawAxiosRequestConfig) {
    return UserControllerApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
