import api from '~/api'
import useFetch from '~/hooks/useFetch'
import { useAuthStore } from '~/stores'
import { Button, Space, Table, Typography, type TableProps } from 'antd'

interface Application {
  id: number
  freelancerName: string | null
  cvUrl: string | null
  status: string
}

interface Job {
  jobId: number
  jobTitle: string
  status: string
  applications: Application[]
}

const MyJobPage: React.FC = () => {
  const accessToken = useAuthStore((state) => state.auth?.accessToken)
  const [responseJob] = useFetch(() =>
    api.getEmployerJobsWithApplications({ headers: { Authorization: `Bearer ${accessToken}` } })
  )

  const columns: TableProps<Job>['columns'] = [
    {
      title: 'Job Title',
      dataIndex: 'jobTitle',
      key: 'jobTitle',
      render: (text) => <Typography.Text>{text}</Typography.Text>
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'status',
      render: (text) => {
        if (text === 'Active')
          return (
            <Space>
              <svg
                className='flex'
                width='20'
                height='20'
                viewBox='0 0 20 20'
                fill='none'
                xmlns='http://www.w3.org/2000/svg'
              >
                <path
                  d='M13.6526 6.89453H12.7366C12.5374 6.89453 12.3479 6.99023 12.2307 7.1543L9.1604 11.4121L7.76978 9.48242C7.65259 9.32031 7.46509 9.22266 7.26392 9.22266H6.3479C6.22095 9.22266 6.14673 9.36719 6.22095 9.4707L8.65454 12.8457C8.71203 12.9259 8.78782 12.9913 8.87563 13.0364C8.96343 13.0815 9.06072 13.1051 9.15943 13.1051C9.25814 13.1051 9.35543 13.0815 9.44323 13.0364C9.53103 12.9913 9.60682 12.9259 9.66431 12.8457L13.7776 7.14258C13.8538 7.03906 13.7795 6.89453 13.6526 6.89453Z'
                  fill='#00A110'
                />
                <path
                  d='M10 1.25C5.16797 1.25 1.25 5.16797 1.25 10C1.25 14.832 5.16797 18.75 10 18.75C14.832 18.75 18.75 14.832 18.75 10C18.75 5.16797 14.832 1.25 10 1.25ZM10 17.2656C5.98828 17.2656 2.73438 14.0117 2.73438 10C2.73438 5.98828 5.98828 2.73438 10 2.73438C14.0117 2.73438 17.2656 5.98828 17.2656 10C17.2656 14.0117 14.0117 17.2656 10 17.2656Z'
                  fill='#00A110'
                />
              </svg>
              <Typography.Text className='text-[#00A110]'>{text}</Typography.Text>
            </Space>
          )
        return (
          <Space>
            <svg
              className='flex'
              width='20'
              height='20'
              viewBox='0 0 20 20'
              fill='none'
              xmlns='http://www.w3.org/2000/svg'
            >
              <path
                fill-rule='evenodd'
                clip-rule='evenodd'
                d='M10 1.25C14.832 1.25 18.75 5.16797 18.75 10C18.75 14.832 14.832 18.75 10 18.75C5.16797 18.75 1.25 14.832 1.25 10C1.25 5.16797 5.16797 1.25 10 1.25ZM10 2.73438C5.98828 2.73438 2.73438 5.98828 2.73438 10C2.73438 14.0117 5.98828 17.2656 10 17.2656C14.0117 17.2656 17.2656 14.0117 17.2656 10C17.2656 5.98828 14.0117 2.73438 10 2.73438ZM12.5003 6.61769C12.5007 6.61783 12.5011 6.61805 12.5019 6.61885L13.3812 7.49813C13.382 7.49891 13.3821 7.4993 13.3823 7.49975C13.3824 7.50019 13.3824 7.50067 13.3823 7.50111C13.3822 7.50154 13.382 7.50191 13.3812 7.50272L10.8839 10L13.3812 12.4973C13.3815 12.4976 13.3819 12.498 13.3821 12.4985L13.3823 12.4989C13.3824 12.4994 13.3824 12.4998 13.3823 12.5003C13.3822 12.5007 13.382 12.5011 13.3812 12.5019L12.5019 13.3812C12.5011 13.382 12.5007 13.3822 12.5003 13.3823C12.4998 13.3825 12.4993 13.3825 12.4989 13.3823C12.4985 13.3822 12.4981 13.382 12.4973 13.3812L10 10.8839L7.50273 13.3812C7.50191 13.382 7.50156 13.3822 7.50109 13.3823C7.50065 13.3824 7.50017 13.3824 7.49973 13.3823C7.4993 13.3822 7.49893 13.382 7.49813 13.3812L6.61883 12.5019C6.61832 12.5014 6.61793 12.5009 6.61769 12.5003C6.61756 12.4998 6.61756 12.4993 6.61769 12.4989C6.61783 12.4985 6.61805 12.4981 6.61885 12.4973L9.11611 10L6.61885 7.50273C6.61847 7.50239 6.61814 7.50199 6.61787 7.50154L6.61769 7.50109C6.61756 7.50065 6.61756 7.50017 6.61769 7.49973C6.61783 7.4993 6.61805 7.49893 6.61885 7.49813L7.49813 6.61883C7.49891 6.61805 7.4993 6.61785 7.49975 6.61769C7.50019 6.61756 7.50067 6.61756 7.50111 6.61769C7.50154 6.61783 7.50191 6.61805 7.50272 6.61885L10 9.11611L12.4973 6.61885C12.4981 6.61805 12.4985 6.61783 12.4989 6.61769C12.4994 6.61756 12.4998 6.61756 12.5003 6.61769H12.5003Z'
                fill='#F90000'
              />
            </svg>

            <Typography.Text className='text-[#F90000]'>{text}</Typography.Text>
          </Space>
        )
      }
    },
    {
      title: 'Applications',
      dataIndex: 'applications',
      key: 'applications',
      render: (_, { applications }) => (
        <Space>
          <svg
            className='flex'
            width='15'
            height='15'
            viewBox='0 0 15 15'
            fill='none'
            xmlns='http://www.w3.org/2000/svg'
          >
            <path
              d='M13.3537 11.0232C12.8844 10.5536 12.336 10.1702 11.7337 9.89077C12.5831 9.20267 13.125 8.1527 13.125 6.97524C13.125 4.8978 11.3925 3.19347 9.31499 3.22535C7.26938 3.25722 5.62126 4.92405 5.62126 6.97524C5.62126 8.1527 6.16501 9.20267 7.0125 9.89077C6.41008 10.17 5.86167 10.5534 5.39251 11.0232C4.36877 12.0488 3.78752 13.4025 3.75002 14.8463C3.74952 14.8663 3.75303 14.8862 3.76035 14.9048C3.76766 14.9234 3.77863 14.9404 3.79261 14.9548C3.80659 14.9691 3.82329 14.9805 3.84174 14.9882C3.86019 14.996 3.88 15 3.90002 15H4.95002C5.03064 15 5.09814 14.9363 5.10001 14.8556C5.13564 13.7682 5.57626 12.7501 6.35063 11.9776C6.74689 11.5792 7.21823 11.2634 7.73736 11.0484C8.25649 10.8335 8.8131 10.7236 9.37499 10.7251C10.5169 10.7251 11.5912 11.1695 12.3993 11.9776C13.1718 12.7501 13.6125 13.7682 13.65 14.8556C13.6518 14.9363 13.7193 15 13.8 15H14.85C14.87 15 14.8898 14.996 14.9082 14.9882C14.9267 14.9805 14.9434 14.9691 14.9574 14.9548C14.9713 14.9404 14.9823 14.9234 14.9896 14.9048C14.9969 14.8862 15.0005 14.8663 15 14.8463C14.9625 13.4025 14.3812 12.0488 13.3537 11.0232ZM9.37499 9.37517C8.73374 9.37517 8.13 9.1258 7.67812 8.67206C7.45135 8.44708 7.27222 8.17872 7.15142 7.88301C7.03061 7.58729 6.97062 7.27027 6.975 6.95086C6.98063 6.33588 7.22625 5.74152 7.65562 5.30091C8.10562 4.83967 8.70749 4.58281 9.35061 4.57531C9.98623 4.56968 10.6031 4.81717 11.0569 5.26154C11.5218 5.71715 11.7768 6.3265 11.7768 6.97524C11.7768 7.61647 11.5275 8.21832 11.0737 8.67206C10.8511 8.89573 10.5864 9.07304 10.2948 9.19373C10.0032 9.31442 9.69056 9.37608 9.37499 9.37517ZM4.67814 7.47022C4.66127 7.3071 4.65189 7.14211 4.65189 6.97524C4.65189 6.67712 4.68002 6.3865 4.73252 6.10339C4.74564 6.03589 4.71002 5.96652 4.64814 5.93839C4.39314 5.82402 4.15877 5.66652 3.95627 5.46778C3.71766 5.23643 3.5299 4.95787 3.40496 4.6499C3.28002 4.34192 3.22066 4.01128 3.23065 3.67908C3.24753 3.07723 3.4894 2.50537 3.91127 2.07413C4.37439 1.59977 4.99689 1.34103 5.65876 1.34853C6.25688 1.35415 6.83438 1.58477 7.27125 1.99351C7.41937 2.13225 7.54687 2.286 7.65375 2.45099C7.69125 2.50912 7.76437 2.53349 7.82812 2.51099C8.15812 2.39662 8.50687 2.316 8.86499 2.2785C8.96999 2.26725 9.02999 2.15475 8.98311 2.061C8.37374 0.855415 7.12875 0.0229393 5.68876 0.000439932C3.6094 -0.0314341 1.87691 1.67289 1.87691 3.74846C1.87691 4.92592 2.41878 5.97589 3.26815 6.66399C2.6719 6.93961 2.12253 7.32023 1.64629 7.79646C0.618793 8.82206 0.0375466 10.1758 4.6886e-05 11.6213C-0.000453558 11.6414 0.00305647 11.6613 0.0103702 11.6799C0.017684 11.6985 0.0286535 11.7155 0.0426324 11.7298C0.0566112 11.7442 0.0733167 11.7556 0.0917643 11.7633C0.110212 11.7711 0.130028 11.7751 0.150046 11.7751H1.20191C1.28254 11.7751 1.35004 11.7113 1.35191 11.6307C1.38754 10.5433 1.82816 9.52516 2.60253 8.75268C3.15378 8.20145 3.82877 7.81896 4.56564 7.63334C4.63877 7.61459 4.68752 7.54522 4.67814 7.47022Z'
              fill='black'
            />
          </svg>
          <Typography.Text>{applications.length} applicant</Typography.Text>
        </Space>
      )
    },
    {
      title: 'Action',
      key: 'action',
      render: (_, record) => (
        <Button type='primary' size='large'>
          View application
        </Button>
      )
    }
  ]

  // const applications = responseJob?.flatMap((job) =>
  //   job.applications.map((application) => ({
  //     ...application,
  //     jobId: job.jobId,
  //     jobTitle: job.jobTitle
  //   }))
  // )
  console.log(responseJob)
  return (
    <div className='w-full h-full'>
      <div className='py-5 px-10 md:py-10 md:px-20'>
        <Typography.Title level={3}>My Job</Typography.Title>
        <Table columns={columns} dataSource={responseJob} />
      </div>
    </div>
  )
}

export default MyJobPage
